plugins {
    id 'java'
}

/*tasks.withType(javadoc).configureEach {
    javaCompiler = javaToolchains.compilerFor {
        languageVersion = JavaLanguageVersion.of(11)
    }
}*/

//Solution by the first link
if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

javadoc {

    destinationDir = file("${buildDir}/docs/javadoc")

    exclude 'armyc2/c5isr/geo/**'
    exclude 'armyc2/c5isr/JavaLineArray/**'
    exclude 'armyc2/c5isr/JavaTacticalRenderer/**'
    exclude 'armyc2/c5isr/RenderMultipoints/**'
    exclude 'armyc2/c5isr/sun/**'
    exclude 'armyc2/c5isr/web/exceptions/**'
    exclude 'armyc2/c5isr/web/json/**'
    exclude 'armyc2/c5isr/web/render/utilities/**'
    exclude 'armyc2/c5isr/web/render/GeoPixelConversion.java'
    exclude 'armyc2/c5isr/web/render/MultiPointHandler.java'
    exclude 'armyc2/c5isr/web/render/PointConverter.java'
    exclude 'armyc2/c5isr/web/render/Shape3DHandler.java'
    exclude 'armyc2/c5isr/web/render/SymbolModifiers.java'
    exclude 'armyc2/c5isr/renderer/tester/**'
    exclude 'armyc2/c5isr/renderer/IIconRenderer.java'
    exclude 'armyc2/c5isr/renderer/IconRenderer.java'
    exclude 'armyc2/c5isr/renderer/PatternFillRenderer.java'
    exclude 'armyc2/c5isr/renderer/SinglePointRenderer.java'
    exclude 'armyc2/c5isr/renderer/utilities/EntityCode.java'
    exclude 'armyc2/c5isr/renderer/utilities/ErrorLogger.java'
    exclude 'armyc2/c5isr/renderer/utilities/GeoPixelConversion3D.java'
    exclude 'armyc2/c5isr/renderer/utilities/IMultiPointRenderer.java'
    exclude 'armyc2/c5isr/renderer/utilities/IPointConversion.java'
    exclude 'armyc2/c5isr/renderer/utilities/LRUCache.java'
    exclude 'armyc2/c5isr/renderer/utilities/LRUEntry.java'
    exclude 'armyc2/c5isr/renderer/utilities/MeasureSVGs.java'
    exclude 'armyc2/c5isr/renderer/utilities/PointConversion.java'
    exclude 'armyc2/c5isr/renderer/utilities/PointConversionDummy.java'
    exclude 'armyc2/c5isr/renderer/utilities/PointConverter3D.java'
    exclude 'armyc2/c5isr/renderer/utilities/RectUtilities.java'
    exclude 'armyc2/c5isr/renderer/utilities/RendererUtilities.java'
    exclude 'armyc2/c5isr/renderer/utilities/SettingsChangedEvent.java'
    exclude 'armyc2/c5isr/renderer/utilities/SettingsChangedEventListener.java'
    exclude 'armyc2/c5isr/renderer/utilities/SettingsEventListener.java'
    exclude 'armyc2/c5isr/renderer/utilities/ShapeUtilities.java'
    exclude 'armyc2/c5isr/renderer/utilities/SVGELookup.java'
    //exclude 'armyc2/c5isr/renderer/utilities/SVGInfo.java'
    exclude 'armyc2/c5isr/renderer/utilities/SVGLookup.java'
    exclude 'armyc2/c5isr/renderer/utilities/SymbolDraw.java'
    //exclude 'armyc2/c5isr/renderer/utilities/TextInfo.java'

    //excludes win over includes
    //exclude { FileTreeElement elem -> ((elem.path.contains('/tests/') || elem.path.contains('/Tests/') || elem.path.contains('/testsimpl/')) && !elem.path.contains('com/toto/core/tests/'))}
}

task javadocJar(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    archiveClassifier  = 'javadoc'
}


task sourceJar(type: Jar) {
    from sourceSets.main.java.srcDirs
    archiveClassifier  = 'javadoc'
}

artifacts {
    archives javadocJar
    archives sourceJar
}

group = 'armyc2.c5isr.renderer'
version = '2.1.1'

repositories {
    mavenCentral()
}

dependencies {
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'

    //fancy world math, https://github.com/mgavaghan/geodesy
    implementation 'org.gavaghan:geodesy:1.1.3'

    //jsvg - SVG rendering library, https://github.com/weisJ/jsvg
    implementation("com.github.weisj:jsvg:1.6.1");
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

jar {
    manifest {
        attributes "Tester": "armyc2.c5isr.renderer.tester"
    }

    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

test {
    useJUnitPlatform()
}